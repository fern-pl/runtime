/// General purpose object functionality.
module rt.object;

public struct MaskArray(T)
{
    nuint length;
    T* data;
    nuint* indices;
}

public:
/// Shallow clones an object.
T dup(T)(const T val) trusted
{
    return = val;
}

/// Deep clones an object by the given depth, a depth of nint.max is default.
T ddup(T)(const T val, nint depth = nint.max) trusted
{
    if (!T->isByRef || depth < 0)
        return val;
    
    return = T();
    if (T->isArray)
    {
        foreach (elem; val)
            return ~= elem.ddup(depth);
    }
    else
    {
        foreach (field; val->fields)
            return->getField(field.name) = field.ddup(depth - 1);
    }
}

B __convert(B, A)(const A val)
{
    // void[] to ushort[]
    if ((B->isStaticArray || B->isDynamicArray) && (B->isStaticArray || B->isDynamicArray))
    {
        return.length = (val.length / A->type->size) * B->type->size;
        return.ptr = val.ptr |> B*;
        return;
    }

    // ushort[2] to ubyte[4]
    if (A->isStaticArray || B->isStaticArray)
        &return |> *A* => val;

    if (A->fields[0]->type is B)
        return => val->fields[0];

    if (B->fields[0]->type is A)
    {
        return->fields[0] = val;
        return;
    }

    if (A->isAggregate && B->isAggregate)
    {
        foreach (field; val->fields)
        {
            if (B->hasField(field) && B->getField(field)->canCast(field))
                return->getField(field) = field;
        }
        return;
    }
    // TODO: this hurts my head
}

T->inherits[$-1] __downcast(T)(const T val)
    if (T->inherits.length > 0)
{
    return __convert!(T->inherits[$-1])(val);
}

T[] __iota(T)(T start, T end)
    if (T->isIntegral)
{
    return = T[end - start];
    nuint iter;
    while (start < end)
        return[iter++] = start++;
}

T __slice(T)(const T val, nuint start, nuint stop)
    if (T->isArray)
{
    return.length = stop - start;
    return.ptr = val.ptr + start;
}

// in void* out void[] from the slice.
(T->type)[] __slice(T)(T val, nuint start, nuint stop)
    if (T->isPointer)
{
    return.length = stop - start;
    return.ptr = val + start;
}

T->type pop(T)(ref T val)
    if (T->isDynamicArray)
{
    return = val[$-1];
    val = val[0..$-1];
}

A push(A, B)(ref A val, B elem)
    if (T->isDynamicArray)
{
    return = val ~= elem;
}