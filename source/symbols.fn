module rt.symbols;

public const tagged SymAttr : ^long
{
    // Top-Level Kind
    TYPE = 1 << 0;
    STRUCT = 1 << 1;
    CLASS = 1 << 2;
    TAGGED = 1 << 3;
    TUPLE = 1 << 4;
    MODULE = 1 << 5;

    FUNCTION = 1 << 5;
    DELEGATE = 1 << 6;
    LAMBDA = 1 << 7;
    CTOR = 1 << 8;
    DTOR = 1 << 9;
    UNITTEST = 1 << 10;

    FIELD = 1 << 11;
    LOCAL = 1 << 12;
    PARAMETER = 1 << 13;

    EXPRESSION = 1 << 14;
    LITERAL = 1 << 15;

    // Attributes
    PUBLIC = 1 << 16;
    PRIVATE = 1 << 17;
    INTERNAL = 1 << 18;

    SAFE = 1 << 19;
    SYSTEM = 1 << 20;
    TRUSTED = 1 << 21;

    STATIC = 1 << 22;
    // NOT thread-local storage.
    GLOBAL = 1 << 23;
    // Non-temporal.
    TRANSIENT = 1 << 24;
    ATOMIC = 1 << 25;
    BITFIELD = 1 << 26;
    PURE = 1 << 36;
    CONST = 1 << 37;
    REF = 1 << 38;

    KIND_HEAP = 1 << 27;
    KIND_STACK = 1 << 28;
    KIND_SCALAR = 1 << 29;
    KIND_FLOAT = 1 << 30;
    KIND_XMM = 1 << 31;
    KIND_YMM = 1 << 32;
    KIND_ZMM = 1 << 33;
    KIND_READONLY = 1 << 34;
    KIND_DEFAULT = 1 << 35;

    ARRAY = 1 << 39;
    DYNARRAY = 1 << 40;
    // Static array.
    FIXARRAY = 1 << 41;
    // Associative array.
    ASOARRAY = 1 << 42;

    STRING = 1 << 43;
    WSTRING = 1 << 44;
    DSTRING = 1 << 45;
    BYTE = 1 << 46;
    WORD = 1 << 47;
    DWORD = 1 << 48;
    QWORD = 1 << 49;
    FLOAT = 1 << 50;
    DOUBLE = 1 << 51;
    SIGNED = 1 << 52;

    GLOB = 1 << 53;
    ALIAS = 1L << 54;

    FORMAT_MASK = DYNARRAY | ASOARRAY | SIGNED | FLOAT | DOUBLE | BITFIELD;
}

public class Symbol
{
    Glob glob;
    SymAttr symattr;
    string name;
    Symbol[] parents;
    Symbol[] children;
    Symbol[string] attributes;

    string identifier()
    {
        string ret;
        foreach (parent; parents)
            ret ~= parent.name~'.';
        return ret~name;
    }
}

public class Type : Symbol
{
    Type[string] inherits;
    Variable[] fields;
    Function[] functions;
    ubyte[] data;
    nuint size;
    nuint align;
}

public class Function : Symbol
{
    // Will begin with all alias parameters and then subsequently ret-args.
    Symbol[] parameters;
    // Will begin with ret-args and then subsequently all locals.
    Symbol[] locals;
    //Instruction[] instructions;
    nuint align;
}


public class Variable : Symbol
{
    Type type;
    ubyte[] data;
    nuint size;
    nuint align;
    nuint offset;
}

// The tagged is acting like a class here because of kind:heap.
public tagged kind:heap Alias : Symbol
{
    Symbol single;
    Symbol[] many;
}

public class Module : Symbol
{
    Symbol[] imports;
    Type[] types;
    Variable[] fields;
    Function[] functions;
}

public class Glob : Symbol
{
    Symbol[string] symbols;
    Module[string] modules;
    Type[string] types;
    Variable[string] variables;
    Function[string] functions;
    Alias[string] aliases;
    Function[] unittests;
    Symbol[] context;
}

public:
alias __this()
{
    // TODO: Add this to the language.
    return glob->context->prev;
}