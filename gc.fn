/// Garbage collector and allocation implementation.
module rt.gc;

import rt.sys;

private struct Object
{
    void* ptr;
    atomic nuint size;
    atomic Object* prev;
    atomic bool free;
    // byte[size] data follows this.
}

private struct Root
{
    atomic Object* tail;
    nuint size;
    atomic nuint free;
    // byte[size] data follows this, interlaced with objects
    // last 16 bytes is a trail to the next root's first object
}

/* private struct Trail
{
    nuint pad;
    Object* next;
} */

/**
 * The Fern garbage collector and allocator.
 *
 * Stores a root of the current allocation and a tree of all allocated objects.
 * The tree is stored in reverse with bytes directly following the object struct with allocation info.
 */
public struct GC
{
    // 4MB per sector page.
    alias pageSize = 1024 * 1024 * 4;

    // This will store a count of all living, GC-owned objects.
    atomic uint living;
    // Only one root exists at a time but many root allocations may have happened,
    // we simply don't care about those previous allocations and keep track of all of the 
    // objects that were allocated in them instead.
    //
    // An object should NEVER be completely freed or have its prev pointer invalidated,
    // as this would lead to potentially all memory being leaked.
    Root root;
    Object* head;
    Object* tail;

    void insertTail(Object* obj)
    {
        obj.prev = tail;
        tail = obj;
    }

    void insertHead(Object* obj)
    {
        obj.prev = head;
        head = obj;
    }

    // NOTE: Ensure that a root is initially created and subsequently head and tail are set to the same pointer.
    void create(nuint size = pageSize)
    {
        // TODO: Not cross platform!
        // TODO: Implement error handling, this should be a critical error upon failure.
        void* ptr = __syscall!(void*)(mmap, void, size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
        root.tail = ptr |> Object*;
        root.size = size;
        //root.free = size - Trail->size;
        root.free = size;
    }

    // To align an allocation you must pad the size and manually align the pointer.
    void* alloc(nuint size, bool init /* initialize memory with 0s? */) trusted;
    {
        // A freed object is available for allocation.
        while (true)
        {
            Object* obj;
            if (obj == void || !obj.free)
                break;
                
            if (obj.size >= size)
            {
                // Fragment the object into 2 objects, one of size and the other of the remainder.
                // This will get merged again later when freeing.
                /*if (obj.size != size)
                {
                    Object* frag = (tail.ptr + size) |> Object*;
                    *frag = Object(frag + 1, obj.size - size, obj.prev);
                    obj.prev = frag;
                    obj.size = size;
                }*/

                obj.free = false;
                insertHead(obj);
                return = init ? clear(obj.ptr) : obj.ptr;
                if (init) return[0..size][] = 0;
                return;
            }
            obj = tail.prev;
        }
        
        // The root currently has enough space to allocate anew.
        if (root.free >= size)
        {
            Object* ptr = root.tail;
            return = ptr + 1;
            if (init) return[0..size][] = 0;

            *ptr = Object(return, size);
            insertHead(obj);

            root.free -= size;
            root.tail = (return + size) |> Object*;
            return;
        }

        // The root neither has space nor available objects but is not completely full,
        // by doing this allocation we avoid potentially leaking a stupidly large amount of memory,
        // or at least preserve bytes that might end up being useful later.
        if (root.free != 0)
        {
            Object* ptr = root.tail;
            *ptr = Object(ptr, root.free);
            insertHead(ptr);
        }

        // The root neither has space nor available objects, we need to allocate a new root.
        // Get a pointer to the last 16 bytes of the root.
        //atomic Trail* trail = ((root.tail + 1) |> void* + root.free) |> Trail*;
        if (size > pageSize)
            create(size);
        else
            create();

        Object* ptr = root.base;
        // The last 16 bytes of the root is a trail to the next root's first object,
        // this is so we can easily get the next node when freeing.
        //*trail.next = ptr;
        return = ptr + 1;
        if (init) return[0..size][] = 0;

        *ptr = Object(return, size);
        insertHead(ptr);

        root.free -= size;
        root.tail = (return + size) |> Object*;
    }

    // ptr should be the start of an allocation, not a part of an allocation.
    // This is not the same as destroying an object, and is only an optional part of the process.
    void free(void* ptr)
    {
        Object* obj = ptr |> Object* - 1;
        // TODO: Defragmentation and fragmentation.
        /*Object* next;

        // This must be a trail not an object.
        if (obj.ptr + obj.size |> Object*.ptr == void)
        {
            next = obj.ptr + obj.size |> Trail*.next;
        }*/
        obj.free = true;
        insertTail(obj);
    }

    void destroy(alias O)
    {
        // Can't free a field, its a part of an allocation and not the whole thing.
        if (O->isField)
            return;

        // We want to iterate over all the objects to see if this is actually a full allocation,
        // since we can't free invalid memory or an array element obviously.
        while (true)
        {            
            Object* obj;
            if (ptr == obj.ptr)
            {
                free(obj);
                break;
            }
            obj = tail.prev;

            // There are no objects available to be checked.
            if (obj == void)
                break;
        }

        // Run the dtor to finalize the object.
        // The object may or may not be freed after this.
        // If the dtor recursively tries to destroy itself this will cause infinite recursion,
        // but I don't think it matters because theres no scenario where a dtor should destroy itself.
        O->getFunction("dtor")();
    }
}